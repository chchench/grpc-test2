// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: dataserver_protocol/dataserver.proto

package dataserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataServerClient is the client API for DataServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServerClient interface {
	ProcessData(ctx context.Context, opts ...grpc.CallOption) (DataServer_ProcessDataClient, error)
	GetLatestDataFile(ctx context.Context, in *DataFileType, opts ...grpc.CallOption) (*DataFilePayload, error)
}

type dataServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServerClient(cc grpc.ClientConnInterface) DataServerClient {
	return &dataServerClient{cc}
}

func (c *dataServerClient) ProcessData(ctx context.Context, opts ...grpc.CallOption) (DataServer_ProcessDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataServer_ServiceDesc.Streams[0], "/dataserver.DataServer/ProcessData", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataServerProcessDataClient{stream}
	return x, nil
}

type DataServer_ProcessDataClient interface {
	Send(*C2SData) error
	Recv() (*S2CData, error)
	grpc.ClientStream
}

type dataServerProcessDataClient struct {
	grpc.ClientStream
}

func (x *dataServerProcessDataClient) Send(m *C2SData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataServerProcessDataClient) Recv() (*S2CData, error) {
	m := new(S2CData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dataServerClient) GetLatestDataFile(ctx context.Context, in *DataFileType, opts ...grpc.CallOption) (*DataFilePayload, error) {
	out := new(DataFilePayload)
	err := c.cc.Invoke(ctx, "/dataserver.DataServer/GetLatestDataFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServerServer is the server API for DataServer service.
// All implementations must embed UnimplementedDataServerServer
// for forward compatibility
type DataServerServer interface {
	ProcessData(DataServer_ProcessDataServer) error
	GetLatestDataFile(context.Context, *DataFileType) (*DataFilePayload, error)
	mustEmbedUnimplementedDataServerServer()
}

// UnimplementedDataServerServer must be embedded to have forward compatible implementations.
type UnimplementedDataServerServer struct {
}

func (UnimplementedDataServerServer) ProcessData(DataServer_ProcessDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessData not implemented")
}
func (UnimplementedDataServerServer) GetLatestDataFile(context.Context, *DataFileType) (*DataFilePayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestDataFile not implemented")
}
func (UnimplementedDataServerServer) mustEmbedUnimplementedDataServerServer() {}

// UnsafeDataServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServerServer will
// result in compilation errors.
type UnsafeDataServerServer interface {
	mustEmbedUnimplementedDataServerServer()
}

func RegisterDataServerServer(s grpc.ServiceRegistrar, srv DataServerServer) {
	s.RegisterService(&DataServer_ServiceDesc, srv)
}

func _DataServer_ProcessData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServerServer).ProcessData(&dataServerProcessDataServer{stream})
}

type DataServer_ProcessDataServer interface {
	Send(*S2CData) error
	Recv() (*C2SData, error)
	grpc.ServerStream
}

type dataServerProcessDataServer struct {
	grpc.ServerStream
}

func (x *dataServerProcessDataServer) Send(m *S2CData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataServerProcessDataServer) Recv() (*C2SData, error) {
	m := new(C2SData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DataServer_GetLatestDataFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataFileType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).GetLatestDataFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataserver.DataServer/GetLatestDataFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).GetLatestDataFile(ctx, req.(*DataFileType))
	}
	return interceptor(ctx, in, info, handler)
}

// DataServer_ServiceDesc is the grpc.ServiceDesc for DataServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataserver.DataServer",
	HandlerType: (*DataServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestDataFile",
			Handler:    _DataServer_GetLatestDataFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessData",
			Handler:       _DataServer_ProcessData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dataserver_protocol/dataserver.proto",
}
